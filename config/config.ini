[DEFAULT]
# Prefer environment variable over `bot_token.txt` (true/false)
# Set to True to prefer the environment variable over the token file.
preferenvforbottoken = True
# Set to True to allow falling back to the alternative token source if the preferred one fails.
AllowBotTokenFallback = True
# Prompt the user for a Telegram Bot API token if it's not found; write it to `config/bot_token.txt`.
AskForTokenIfNotFound = True

[GeneralSettings]
# Restart on connection failure
restartonconnectionfailure = True
# Allow sites outside of YouTube (= all urls supported by `yt-dlp`)
allowallsites = True

[UpdateSettings]
# Check for `yt-dlp` updates on startup 
# (note: `yt-dlp` is usually recommended to be kept up to date)
CheckForYTDLPUpdates = True
UpdateCommand = pip install -U yt-dlp

[TranscriptionSettings]
# Include the text header (video info, transcription info) in `.txt`
includeheaderintranscription = True
# Keep generated audio files (true = yes, false = delete after transcription)
keepaudiofiles = False
# Send the transcriptions as file(s) (.srt, .vtt, .txt)
sendasfiles = True
# Send the transcriptions as message(s) in Telegram
sendasmessages = True

[WhisperSettings]
# set the default model and settings to use on startup
model = turbo
autodetect = True
defaultlanguage = auto
supportedlanguages = auto, af, am, ar, as, az, ba, be, bg, bn, bo, br, bs, ca, cs, cy, da, de, el, en, es, et, eu, fa, fi, fo, fr, gl, gu, ha, haw, he, hi, hr, ht, hu, hy, id, is, it, ja, jw, ka, kk, km, kn, ko, la, lb, ln, lo, lt, lv, mg, mi, mk, ml, mn, mr, ms, mt, my, ne, nl, nn, no, oc, pa, pl, ps, pt, ro, ru, sa, sd, si, sk, sl, sn, so, sq, sr, su, sv, sw, ta, te, tg, th, tk, tl, tr, tt, uk, ur, uz, vi, yi, yo, yue, zh, Afrikaans, Albanian, Amharic, Arabic, Armenian, Assamese, Azerbaijani, Bashkir, Basque, Belarusian, Bengali, Bosnian, Breton, Bulgarian, Burmese, Cantonese, Castilian, Catalan, Chinese, Croatian, Czech, Danish, Dutch, English, Estonian, Faroese, Finnish, Flemish, French, Galician, Georgian, German, Greek, Gujarati, Haitian, Haitian Creole, Hausa, Hawaiian, Hebrew, Hindi, Hungarian, Icelandic, Indonesian, Italian, Japanese, Javanese, Kannada

[ModelSettings]
validmodels = tiny.en, tiny, base.en, base, small.en, small, medium.en, medium, large-v3, turbo

[LoggingSettings]
updateintervalseconds = 10

[AudioSettings]
# Allow voice messages? (true/false), default: true
allowvoicemessages = True
# Allow audio file uploads? (true/false), default: true
allowaudiofiles = True
# Allow video file uploads? (true/false), default: false
allowvideofiles = False
# Maximum file size for uploaded files
# NOTE: Telegram Bot API currently has a 20MB size limit.
max_file_size_mb = 20

[AllowedFileFormats]
allowed_formats = mp3, wav, m4a, aac, flac, ogg, wma, aiff
# can also be i.e.: mp4, mkv, avi, mov, webm, flv, etc ...

[NotificationSettings]
# Notification messages to send to the user.
# Leave these BLANK (i.e. `queue_message next = `) if you want to suppress them.
# NOTE: whn you're using symbols like `%` in your message, you need to double them as `%%`
# >> The user sees this if their request is first in queue
queue_message_next = ‚è≥ Your request is next and is currently being processed.
# queue_message_next = 
# >> The user sees this if there are others in queue
queue_message_queued = ‚è≥ Your request has been added to the queue. There are {jobs_ahead} jobs ahead of yours.
# queue_message_queued = 
# >> Shown right before we attempt the transcription
audio_info_message = Audio file length:\n{audio_duration}\n\nWhisper model in use:\n{model}\n\nModel language set to:\n{language}\n\nEstimated transcription time:\n{est_time:.1f} minutes.\n\nTranscribing audio...
# audio_info_message =
# === GPU message ===
# >> If no GPU is found, it just sends ‚ÄúNo GPU available, using CPU‚Äù by default
gpu_message_template = Using GPU {gpu_id}: {gpu_name}\nFree Memory: {gpu_free} MB\nLoad: {gpu_load}%%
# gpu_message_template =
# >> If no GPU is found, send this message:
gpu_message_no_gpu = ‚ö†Ô∏è No GPU available, using CPU for transcription. WARNING: this will be slow.
# gpu_message_no_gpu =
# send a message containing the video info if available (true/false)
send_video_info = true
# send a detailed message on the transcription process (model in use, language, estimated time, ...) (true/false) 
send_detailed_info = true
# ~~~ VOICE MESSAGES ~~~
# Message to send when a voice message has been received (leave blank to send no message to the user)
voice_message_received = üé§ Voice message received! Please wait.
# voice_message_received =
# ~~~ MEDIA FILES ~~~
# Message to send when a file has been received (leave blank to send no message to the user)
audio_file_received = üé∂ Audio file received! Please wait.
# audio_file_received =
# Send a message upon process completion (true/false)
sendcompletionmessage = True
# Completion message contents (accepts simple Telegram html and line changes)
# completionmessage = Transcription complete. Have a nice day!
completionmessage = Transcription complete. Have a nice day! üòä\n\n<i>P.S. If you like this project, please give it a star on GitHub: https://github.com/FlyingFathead/whisper-transcriber-telegram-bot/</i>

[RateLimitSettings]
# Cooldowns & maximum requests per minute per user
cooldown_seconds = 10
max_requests_per_minute = 5

[YTDLPSettings]
# use your own `cookies.txt` file (true/false)
# this is sometimes required for sites that require login
# or, in some cases, with sites like YouTube that don't like downloaders.
# (will be skipped if the file isn't found)
use_cookies_file = false
cookies_file = config/cookies.txt
# use cookies from your browser (to bypass yt-dlp woes)
use_browser_cookies = true
# your browser type
browser_type = firefox
# your browser cookies profile location, leave blank to use default location
# (can be set either as a /path/to/profile.default or env var to read the location from)
browser_cookies_profile = $TRANSCRIBERBOT_BROWSER_COOKIE_LOCATION
# options for cache control
# Use no cache dir (true/false); might work better in some use scenarios
no_cache_dir = True
# cache dir location, leave empty for default
custom_cache_dir = 
# some media sites don't always work well with yt-dlp's audio download feature
# for compatibility, it's recommended to enable the flag below (true)
download_original_video_for_domains_active = true
# list your sites below to download original videos from, comma separated.
# example:
# download_original_video_domains = site1.com, site2.com, site3.com
# these are the sites we use to download original videos from
# (i.e. rumble.com has been a site that's been widely reported as having broken downloads; 
# hence the video-only download method for that site and others alike.)
download_original_video_domains = rumble.com
# use worst video quality (true/false)
# this is usually recommended, because we will only need the _audio_ for transcription.
# adding a high-quality video will cause massive file size increases.
# however, in some cases you might want to turn this off
use_worst_video_quality = true

[VideoDescriptionSettings]
# Set to True to use only a snippet of the video description
use_snippet_for_description = False
# Maximum number of lines to include in the description snippet (if set to true)
description_max_lines = 30

[OwnerSettings]
# If True, read owner user IDs from the environment variable
use_env_for_ownerid = True
# Name of the environment variable to read from
ownerid_env_var_name = WHISPER_TRANSCRIBERBOT_OWNER_USERID
# You can still optionally keep a fallback list of owner IDs in config
# (comma-separated). e.g. 123456, 2345678, 3456789
ownerid_fallback = 0
# If True, ping owners when the bot comes online
ping_owners_on_start = True
